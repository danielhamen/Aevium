import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const baseDir = path.resolve(__dirname, '../app')
const routeMap = {}

function scanDirectories(dir, routeObject) {
  const entries = fs.readdirSync(dir, { withFileTypes: true })

  entries.forEach((entry) => {
    const fullPath = path.join(dir, entry.name)

    if (entry.isDirectory()) {
      // Create a new nested object for the subdirectory
      routeObject[entry.name] = {}
      // Recursively scan subdirectories, passing the new nested object
      scanDirectories(fullPath, routeObject[entry.name])
    } else if (entry.isFile() && entry.name === 'index.tsx') {
      // Add dynamic import function for index.tsx file
      const relativePath = path
        .relative(__dirname, fullPath)
        .replace(/\\/g, '/')
      routeObject['index'] =
        `() => import('${relativePath.replace(/\.tsx$/, '')}')`
    }
  })
}

scanDirectories(baseDir, routeMap)

// Convert routeMap to a TypeScript-compatible output with import functions
const routeMapString = JSON.stringify(routeMap, null, 2).replace(
  /"(\(\) => import\('[^']+'\))"/g,
  '$1',
) // Remove quotes around import functions

const output = `
// This file is auto-generated by scripts/generateRoutes.js
import { Page } from '@Aevium'

export interface Routes {
  [key: string]: Routes | (() => Promise<{ default: typeof Page }>); // Nested routes or import function
}

export const routes: Routes = ${routeMapString};
`

fs.writeFileSync(path.resolve(__dirname, '../app/routes.ts'), output)
console.log('Routes generated successfully')
